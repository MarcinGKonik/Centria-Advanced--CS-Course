// Exercs]ise description

Create a class called IOU which has the following methods:

constructor public IOU() creates a new IOU
public void ChangeDebt(string toWhom, int amount) saves the amount owed and the person owed to to the IOU. You can use this to also lower the debt, but the total amount cannot be negative!
public int HowMuchDoIOweTo(string toWhom) returns the amount owed to the person whose name is given as a parameter. If the person cannot be found, it returns 0.
The class can be used like this:

IOU mattsIOU = new IOU();
mattsIOU.ChangeDebt("Arthur", 51);
mattsIOU.ChangeDebt("Michael", 30);

Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));
Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Michael"));
Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Heikki"));
51
30
0
Note!
If a new debt is added, the debt increases or decreases. Take that into account in your code. Also, the the total amount should not be negative!
IOU mattsIOU = new IOU();
mattsIOU.ChangeDebt("Arthur", -10);

Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));

mattsIOU.ChangeDebt("Arthur", 51);
mattsIOU.ChangeDebt("Arthur", 30);

Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));

mattsIOU.ChangeDebt("Arthur", -30);

Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));

mattsIOU.ChangeDebt("Arthur", -80);

Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));
0
81
51
0

// Exercise solution

using System;
using System.Collections.Generic;

namespace Exercise005
{
    public class Program
    {
        public static void Main(string[] args)
        {
            IOU mattsIOU = new IOU();
            mattsIOU.ChangeDebt("Arthur", 51);
            mattsIOU.ChangeDebt("Michael", 30);

            Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Arthur"));
            Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Michael"));
            Console.WriteLine(mattsIOU.HowMuchDoIOweTo("Heikki"));
        }
    }

    public class IOU
    {
        private Dictionary<string, int> debts;

        public IOU()
        {
            debts = new Dictionary<string, int>();
        }

        public void ChangeDebt(string toWhom, int amount)
        {
            if (debts.ContainsKey(toWhom))
            {
                debts[toWhom] += amount;
            }
            else
            {
                debts.Add(toWhom, amount);
            }

            // If the debt becomes zero or negative, it should be removed or considered settled.
            if (debts[toWhom] <= 0)
            {
                debts.Remove(toWhom);
            }
        }

        public int HowMuchDoIOweTo(string toWhom)
        {
            if (debts.ContainsKey(toWhom))
            {
                return debts[toWhom];
            }
            else
            {
                return 0;
            }
        }
    }
}


